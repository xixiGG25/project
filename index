{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "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L+qWr5+nq+9+SEd8drok6YAjjtbUjRv0n7mP64DJR+mAI47qeI38oiJJUjwW1a2XXKj3F72pvccfoM/O+KISiYQWv/aybr/sa7r4R7N12kVfl9Teu7decoFWLVms/Q+brEOOPVEej6GtNRtV+e+XdPxZM1wX9rOxN5zY57XrPtL1531Oo8ftrxPPmanmhnr5/H5J0p/v/Kl8/hztf9gRKhkyVE3121X56kv65fe/oYt/eGunftxp68b1uv68z2mvfffTZ849X7Xrq1T5yjzd9JUv6DfPvdaRX+o21+q6macrGm7TYSd8VkefdqaibW3aVP2R5s15RF+55sfy+jpHwF9d8S19tGKZjpzWfqJh4UvP6Q+33agtGzfoq9fd1PG8jWtW6W+//aUOnHK0ppw8XbnBPG1cu1qvP/sPvf2fV/SLp+Z122//fPj3WvbWfzX5M6fo4GNOkMfTPonQ3FCvG790rtav+rC9f8//ktpamjve11V33a8pJ53a5fV+fdVlWr30HR163Gfk8Xr15gtP68FbbpDX59fJMy/seJ5pmrrzB9/WgnnPatCwETr29LOVV1CgLRvX680Xn9Ghx5+oIWWjdPJ5X9IHiyvbNyD9dueTmq1NjVow71ntVbFfxgR9qee9Qdjf4YPFlZLU6ezzp/nzL2erdl2Vzv3md3Xhldd3PP72a6/op9/6ku654Urd/cLrHbNSf77zZ6rbvElfvOJaff7b3+94/kuP/Vn339R1dn/96pV6+LYbVb7feP3kj4+rsGRQx/eeeuBu/eXOn+mFPz+sM7/+7V6/XzfL4n83sItkMqmzzjpLknTeeefppptucl3oX7r0Xb3yytsaNmyEJOmKK27QscdO0MMP/05XXnmjcnJydOqpZ+nUU8/SnXfO1l57lWvWrB93eo3XXntZ99zzC02dOk0PPfSY8vLyJbUPoK+//rt69NEH9NxzT+n008/t9Pv+/e95+utfn9Pxx3+20+O//vVsvfnma7riiht09dU3dcwItLQ06wtfmKZbbrlGp512toYP77zRUU/eiyT961/P6f7779L48Qfq73//lwYNKu14jUQiofr67X2q5YMPlmnx4kWaPv1MPfzwE51qi0ajSiTivfibQarsqc85lvdO/dbNGlG+t26b83THJMGMb31Xs86Zpkd/MVtTpp2m0h39N/eh32ndyhU66QsX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",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "G = nx.DiGraph()\n",
    "G.add_node(\"Data\", pos=(-2500, 700))\n",
    "G.add_node(\"Code\", pos=(-4200, 0))\n",
    "G.add_node(\"Inferences\", pos=(-1000, 0))\n",
    "G.add_node(\"Parameters\", pos=(-2500, -700))\n",
    "G.add_node(\"Updates\", pos=(1500, 0))\n",
    "G.add_node(\"Transparency\", pos=(4000, 0))\n",
    "\n",
    "G.add_edges_from([(\"Data\", \"Inferences\")])\n",
    "G.add_edges_from([(\"Code\", \"Inferences\")])\n",
    "G.add_edges_from([(\"Parameters\", \"Inferences\")])\n",
    "G.add_edges_from([(\"Inferences\", \"Updates\")])\n",
    "G.add_edges_from([(\"Updates\", \"Transparency\")])\n",
    "\n",
    "pos = nx.get_node_attributes(G, 'pos')\n",
    "labels = {\"Inferences\": \"Inferences\",\n",
    "          \"Data\": \"Data\",\n",
    "          \"Code\": \"Code\",\n",
    "          \"Parameters\": \"Parameters\",\n",
    "          \"Updates\": \"Updates\",\n",
    "          \"Transparency\": \"Transparency\"}  # Added label for \"NDI\" node in the labels dictionary\n",
    "\n",
    "# Update color for the \"Scenarios\" node\n",
    "node_colors = [\"lightblue\",\"lightblue\", \"lavender\", \"lightblue\", \"lightblue\", \"lightblue\"]\n",
    "# node_colors = [\"lightblue\",\"lavender\", \"lavender\", \"lightgreen\", \"lightpink\", \"lightpink\"]\n",
    "# Suppress the deprecation warning\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n",
    "\n",
    "plt.figure(figsize=(10, 8))\n",
    "nx.draw(G, pos, with_labels=False, node_size=20000, node_color=node_colors, linewidths=2, edge_color='black', style='solid')\n",
    "nx.draw_networkx_labels(G, pos, labels, font_size=14) # , font_weight='bold'\n",
    "nx.draw_networkx_edges(G, pos, edge_color='black', style='solid', width=2)\n",
    "plt.xlim(-5000, 5000)\n",
    "plt.ylim(-1000, 1000)\n",
    "plt.axis(\"off\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# 6 GitHub Repository for Collaboration\n",
    "\n",
    "This week, we'll apply the skills we've developed over the past five weeks to create a GitHub repository, which will serve as the basis for our projects in the coming weeks. The aim is not to achieve perfection initially, but to establish a foundation that can be built upon, potentially with the help of peers.\n",
    "\n",
    "## Objectives:\n",
    "\n",
    "1. **Create a Public GitHub Repository**:\n",
    "   - Set up a repository named `project` on GitHub. You will be working individually, but you are encouraged to use [GitHub Discussions](https://github.com/jhufena/discussions/discussions) to seek help from your peers when needed.\n",
    "\n",
    "2. **Utilize Publicly Available Data**:\n",
    "   - The focus will be on using public data to explore the significance of \"self-reported health\" as a health indicator.\n",
    "\n",
    "3. **Documentation and Transparency**:\n",
    "   - Document your project comprehensively using a `README.md` file and other necessary documentation to make your analysis accessible and understandable. Embrace the principles of [Open Science](https://publichealth.jhu.edu/the-r3-center-for-innovation-in-science-education) which are Rigor, Reproducibility, and Responsibility.\n",
    "\n",
    "## Detailed Steps and Resources:\n",
    "\n",
    "### 6.1 Data Acquisition and Preparation:\n",
    "\n",
    "- **Survey Data**:\n",
    "  - Import the survey data from the 1999-2000 National Health and Nutrition Examination Survey (NHANES):\n",
    "    ```stata\n",
    "    import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/DEMO.XPT\", clear\n",
    "    ```\n",
    "\n",
    "- **Mortality Follow-up Data**:\n",
    "  - Obtain follow-up mortality data to analyze over a 20-year period from the National Center for Health Statistics (NCHS). Detailed linkage instructions are available on the [Linked Mortality](https://ftp.cdc.gov/pub/) page:\n",
    "     - Health Statistics\n",
    "        - NCHS\n",
    "           - Datalinkage\n",
    "              - Linked Mortality\n",
    "                 - `NHANES_1999_2000_MORT_2019_PUBLIC.dat`\n",
    "                 - `Stata_ReadInProgramAllSurveys.do`\n",
    "                 \n",
    "                             \n",
    "```stata\n",
    " //data\n",
    " global mort_1999_2000 https://ftp.cdc.gov/pub/HEALTH_STATISTICS/NCHS/datalinkage/linked_mortality/NHANES_1999_2000_MORT_2019_PUBLIC.dat\n",
    "\n",
    " //code\n",
    "cat https://ftp.cdc.gov/pub/HEALTH_STATISTICS/NCHS/datalinkage/linked_mortality/Stata_ReadInProgramAllSurveys.do\n",
    " ```\n",
    "\n",
    "### 6.2 Code Development:\n",
    "\n",
    "- **Edit and Rename Provided Script**:\n",
    "  - Download, modify, and upload the provided Stata `.do` file for linking the DEMO.XPT data to mortality follow-up data. Rename this file to `followup.do` and commit it with the description: \"Updated DEMO.XPT linkage .do file\". In otherwords, download, modify, and upload `Stata_ReadInProgramAllSurveys.do`. You may watch the week 6 video for the key items to edit. For instance, you may edit it so that it reads in the data directly from the website.\n",
    "\n",
    "- **Data Merging**:\n",
    "  - Execute the following Stata code to merge the survey data with the mortality data, ensuring alignment on the unique sequence numbers:\n",
    "    ```stata\n",
    "    //use your own username/project repo instead of the class repo below\n",
    "    global repo \"https://github.com/jhustata/intermediate/raw/main/\"\n",
    "    do ${repo}followup.do\n",
    "    save followup, replace \n",
    "    import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/DEMO.XPT\", clear\n",
    "    merge 1:1 seqn using followup\n",
    "    lookfor follow\n",
    "    ```\n",
    "\n",
    "### 6.3 Key Parameters for Week 7s Analysis:\n",
    "\n",
    "- **Self-Reported Health Assessment**:\n",
    "  - Import the specific health questionnaire data and prepare it for analysis in Week 7:\n",
    "    ```stata\n",
    "    import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/HUQ.XPT\", clear\n",
    "    ```\n",
    "<Details>\n",
    "   <Summary> 🔑 </Summary>\n",
    "\n",
    "Here's a first iteration of a script that answers they project main goal. Save it as project.do and upload it to you repo. Keep updating it over the next two weeks, with a meaningful commit statement each time for version control.\n",
    "\n",
    "```stata\n",
    "global repo \"https://github.com/jhustata/intermediate/raw/main/\"\n",
    "do ${repo}followup.do\n",
    "save followup, replace \n",
    "import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/DEMO.XPT\", clear\n",
    "merge 1:1 seqn using followup\n",
    "lookfor follow\n",
    "lookfor mortstat permth_int eligstat \n",
    "keep if eligstat==1\n",
    "capture g years=permth_int/12\n",
    "codebook mortstat\n",
    "stset years, fail(mortstat)\n",
    "sts graph, fail\n",
    "save demo_mortality, replace \n",
    "import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/HUQ.XPT\", clear \n",
    "merge 1:1 seqn using demo_mortality, nogen\n",
    "sts graph, by(huq010) fail\n",
    "stcox i.huq010\n",
    "```\n",
    "\n",
    "</Details>\n",
    "\n",
    "### 6.4 Inferences \n",
    "\n",
    "Please review [documentation](https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/HUQ.htm) for the file `HUQ.XPT`, which includes the variable `huq010`\n",
    "\n",
    "**Employ 95%CI and p-values**\n",
    "\n",
    "The following snippet will lay the foundation for your statistical, clinical, and public health inferences:\n",
    "\n",
    "```stata\n",
    "merge 1:1 seqn using demo_mortality, nogen\n",
    "sts graph, by(huq010) fail\n",
    "stcox i.huq010\n",
    "```\n",
    "\n",
    "**Write a brief abstract-style conclusion**\n",
    "But learn a little more about the simple questionnaire item of interest to this project:\n",
    "\n",
    "```stata\n",
    "import sasxport5 \"https://wwwn.cdc.gov/Nchs/Nhanes/1999-2000/HUQ.XPT\", clear \n",
    "huq010 \n",
    "desc huq010\n",
    "codebook huq010\n",
    "```\n",
    "\n",
    "> I have some general questions about your health. Would you say your health in general is:\n",
    "   > - Excellent\n",
    "   > - Very good\n",
    "   > - Good\n",
    "   > - Fair\n",
    "   > - Poor?\n",
    "\n",
    "You task is to provide rigorous and reproducible evidence that responsibly answers this very simple, but overlooked \"screener\" in both clinical and public health settings.\n",
    "\n",
    "### 6.5 Upcoming Updates and Critiques:\n",
    "\n",
    "- **Critique a Recent Article**:\n",
    "  - Engage with recent literature, such as [this study](https://www.sciencedirect.com/science/article/pii/S2666535222000532), to cursorily consider your approach to this simple question vs. the approach these authors took. What is the key difference?\n",
    "\n",
    "- **Plan for Generalizing the Analytic Script**:\n",
    "  - Adapt your script to handle similar data from any period between 1999 and 2019.\n",
    "\n",
    "### 6.6 Documentation and Reproducibility:\n",
    "\n",
    "- **Enhance Documentation**:\n",
    "  - Refer to exemplary documentation practices from major repositories like [Apple](https://github.com/apple/swift), [Google](https://github.com/google/googletest), and [Meta](https://github.com/meta-llama/llama3).\n",
    "\n",
    "- **Commit to Transparency**:\n",
    "  - Make your code and data handling processes as clear and simple as possible to facilitate easy understanding and replication by others.\n",
    "\n",
    "\n",
    "\n",
    " "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### 6.7 Lab \n",
    "\n",
    "#### Setting Up Your GitHub Project\n",
    "\n",
    "**Objective**: Set up a GitHub repository for collaborative health data analysis.\n",
    "\n",
    "**Tasks**:\n",
    "1. **Create a GitHub Repository**: Follow the provided instructions to create a public GitHub repository named `project`. Make sure the repository settings allow for discussions and issues to encourage collaboration.\n",
    "2. **Initial Commit**:\n",
    "   - Add a `README.md` file explaining the project's purpose, how to contribute, and a brief description of the data sources used (DEMO.XPT and mortality linkage data).\n",
    "   - Commit these changes with a meaningful message, such as \"Initial commit with README.md\".\n",
    "\n",
    "**Instructions**:\n",
    "- Use the GitHub interface to create and configure the repository.\n",
    "- Write the `README.md` file using Markdown formatting to make it clear and engaging.\n",
    "- Include links to the data sources and any relevant documentation or tutorials that might help collaborators.\n",
    "- Copy & paste the content of the `README.md` into a new file called `index.md`. \n",
    "   - Click on settings once done\n",
    "   - Activate `pages` as you did in previous homeworks\n",
    "   - This will create a URL for your project, accessible even to those who don't have GitHub accounts\n",
    "   - Improve the aesthetic and usability of this website each week\n",
    "\n",
    "### 6.8 Homework\n",
    "- Submit the URL of your GitHub Page. Ensure it is set to public so it can be accessed and reviewed.\n",
    "- Next week you'll include results from your analysis and some beautiful graphics (see section **6.3** above for your foundational code)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
